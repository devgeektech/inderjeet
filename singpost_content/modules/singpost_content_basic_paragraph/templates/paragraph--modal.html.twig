{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
    'paragraph',
    'modal',
    'fade',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% if paragraph.field_modal_size.value %}
    {% set modal_size = paragraph.field_modal_size.value %}

    {% if modal_size == 'small' %}
        {% set modal_size_class ='modal-sm' %}
    {% endif %}

    {% if modal_size == 'large' %}
        {% set modal_size_class ='modal-lg' %}
    {% endif %}
{% endif %}

{% set modal_id = paragraph.field_modal_id.value %}

{% block paragraph %}
    <div {{ attributes.addClass(classes) }} role="dialog" tabindex="-1" id="{{ modal_id }}" aria-labelledby="{{ modal_id }}-label">
        <div class="modal-dialog modal-dialog-centered {{ modal_size_class }}" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    {% if paragraph.field_modal_title.value %}
                        <h5 class="modal-title" id="{{ modal_id }}-label">{{ paragraph.field_modal_title.value }}</h5>
                    {% endif %}
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    {% for key, item in content.field_modal_body if key|first != '#' %}
                        {{ item }}
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
{% endblock paragraph %}